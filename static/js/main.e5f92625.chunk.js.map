{"version":3,"sources":["main/components/header/Header.tsx","main/pages/errored-page/ErroredPage.tsx","main/pages/loading-page/LoadingPage.tsx","main/components/scroll/ScrollableBlock.tsx","main/components/input/Input.tsx","main/components/input-block/InputBlock.tsx","main/core/calculation-utils.ts","main/pages/exchange-page/ExchangePage.tsx","main/core/fetch-utils.ts","main/pages/exchange-page/MockRateData.ts","main/pages/exchange-page/ExchangePageModel.ts","main/core/actions/exchangeRateDataTypes.ts","main/core/actions/pocketsTypes.ts","main/core/createStore.ts","main/core/reducers/reducePockets.ts","main/core/reducers/reduceExchangeRateData.ts","index.tsx"],"names":["Header","exchangeOnClick","selectedTop","selectedBottom","crossRate","disabled","className","name","currency","onClick","displayName","ErroredPage","children","LoadingPage","ScrollableBlock","props","settings","dots","infinite","speed","slidesToShow","slidesToScroll","accessibility","arrows","Input","value","onChange","style","type","inputMode","InputBlock","pocket","onAmountChange","amount","amountPrefix","bottomLabel","React","useState","inputWidth","setInputWidth","useEffect","amountLength","toString","length","width","event","validFloat","target","match","LastTouched","formatNumberToString","n","precise","toFixed","abortableFetch","request","options","controller","AbortController","signal","abort","ready","fetch","getFetchJson","promise","onError","a","then","res","ok","json","Error","url","data","catch","error","MockRateData","fetchExchangeRateApi","dispatch","fetchObj","payload","result","ExchangePage","pockets","useSelector","state","pocketsValues","Object","values","exchangeRateData","errors","useDispatch","setSelectedTop","setSelectedBottom","amountTop","setAmountTop","amountBottom","setAmountBottom","TOP","lastTouched","setLastTouched","insufficientFundsError","setInsufficientFundsError","abortFetch","callback","id","delay","tick","window","setTimeout","clearInterval","setPollingFetch","prevPocket","BOTTOM","updateTopAmount","updateBottomAmount","message","pocket1","pocket2","rates","base","topRate","botRate","parsedAmount","parseFloat","isNaN","handleTopAmountChange","resetAmounts","handleBottomAmountChange","afterChange","pocketIndex","beforeChange","map","i","key","initialAppState","store","createStore","combineReducers","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5f92625.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport {IPocket} from '../../core/reducers/reducePockets';\n\nexport interface IHeaderProps {\n  exchangeOnClick: () => void;\n  selectedTop: IPocket;\n  selectedBottom: IPocket;\n  crossRate: string;\n  disabled: boolean;\n}\n\nexport const Header = ({exchangeOnClick, selectedTop, selectedBottom, crossRate, disabled}: IHeaderProps) => (\n    <div className=\"header_container\">\n      <header className=\"header_inner_container\">\n        <div className=\"header_cancel\">\n          {'Cancel'}\n        </div>\n        {selectedTop.name !== selectedBottom.name && (\n            <div className=\"header_currency\">\n                <span className=\"header_currency_symbol\">\n                  {selectedTop.currency}\n                </span>\n              {'1 = '}\n                <span className=\"header_currency_symbol\">\n                  {selectedBottom.currency}\n                </span>\n              {crossRate}\n            </div>\n        )}\n        <div className=\"header_exchange\">\n          <button\n              className={`header_exchange_button ${disabled ? 'header_exchange_disabled_button' : ''}`}\n              onClick={exchangeOnClick}\n              disabled={disabled}\n          >\n            {'Exchange'}\n          </button>\n        </div>\n      </header>\n    </div>\n);\n\nHeader.displayName = 'Header';\n","import React from 'react';\n\nexport const ErroredPage: React.FC = ({children}) => (\n    <div className=\"page_container\">\n      <div className=\"page_content\">\n        {children}\n      </div>\n    </div>\n);\n\nErroredPage.displayName = 'ErroredPage';\n","import React from 'react';\n\nexport const LoadingPage: React.FC = ({children}) => (\n    <div className=\"page_container\">\n      <div className=\"page_content\">\n        {children}\n      </div>\n    </div>\n);\n\nLoadingPage.displayName = 'LoadingPage';\n","import React from 'react';\nimport Slider, {Settings} from 'react-slick';\n\nexport interface IScrollableBlockProps extends Settings {\n  className?: string;\n}\n\nexport const ScrollableBlock: React.FC<IScrollableBlockProps> = ({children, className, ...props}) => {\n\n  const settings: Settings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    className: `${className ? className : ''}`,\n    accessibility: true,\n    arrows: false,\n  };\n\n  return (\n      <Slider\n          {...settings}\n          {...props}\n      >\n        {children}\n      </Slider>\n  );\n};\n\nScrollableBlock.displayName = 'ScrollableBlock';\n","import React, {CSSProperties} from 'react';\nimport './Input.css';\n\nexport interface IInputProps {\n  value: string | '';\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  style: CSSProperties;\n}\n\nexport const Input = ({value, onChange, style}: IInputProps) => (\n    <input\n        className=\"input_base\"\n        type=\"text\"\n        style={style}\n        value={value}\n        onChange={onChange}\n        inputMode=\"decimal\"\n    />\n);\n\nInput.displayName = 'Input';\n","import React from 'react';\nimport './InputBlock.css'\nimport {IPocket} from '../../core/reducers/reducePockets';\nimport {Input} from '../input/Input';\n\nexport interface IInputBlockProps {\n  pocket: IPocket;\n  onAmountChange: (pocket: IPocket | '') => void;\n  amount: string;\n  amountPrefix?: string;\n  className?: string;\n  bottomLabel?: React.ReactNode;\n}\n\nexport const InputBlock = ({pocket, onAmountChange, amount, amountPrefix, className, bottomLabel}: IInputBlockProps) => {\n  const [inputWidth, setInputWidth] = React.useState<number>(1);\n\n  React.useEffect(() => {\n    const amountLength = amount.toString().length;\n    if (amountLength) {\n      setInputWidth(amountLength);\n    } else {\n      setInputWidth(1);\n    }\n  }, [amount]);\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const validFloat = event.target.value.match(/^[0-9]{0,4}[.]?[0-9]{0,2}/)?.[0];\n    if (validFloat) {\n      onAmountChange(\n          {\n            ...pocket,\n            value: validFloat,\n          }\n      );\n    } else {\n      onAmountChange('');\n    }\n  };\n\n  return (\n      <div className={`input_block_inner_container ${className ? className : ''}`}>\n        <div className=\"input_block_col_left\">\n          <div className=\"input_block_name\">\n            {pocket.name}\n          </div>\n          <div className=\"input_block_balance\">\n            You have <span className=\"input_block_currency_symbol\">{pocket.currency}</span>{pocket.value}\n          </div>\n        </div>\n        <div className=\"input_block_col_right\">\n          <label className=\"input_label\">\n            {amount && (\n                <span className=\"input_prefix\">\n                  {amountPrefix}\n                </span>\n            )}\n            <Input\n                style={{width: inputWidth + 'ch'}}\n                value={amount}\n                onChange={handleOnChange}\n            />\n            {bottomLabel && (\n                <div className=\"input_block_bottom_label\">\n                  {bottomLabel}\n                </div>\n            )}\n          </label>\n        </div>\n      </div>\n  )\n};\n\nInputBlock.displayName = 'InputBlock';\n","import {IPocket} from './reducers/reducePockets';\nimport {IRatesData} from './reducers/reduceExchangeRateData';\n\nexport const formatNumberToString = (n: number, precise: number = 2): string => {\n  return n.toFixed(precise);\n};\n\nexport const getCrossRate = (pocket1: IPocket, pocket2: IPocket, rates: IRatesData, base: string): string => {\n  return formatNumberToString(\n      pocket1.name === base\n          ? rates[pocket2.name]\n          : rates[pocket2.name] / rates[pocket1.name],\n      4\n  )\n};\n","import React from 'react';\nimport './ExchangePage.css';\nimport {Header} from '../../components/header/Header';\nimport {ErroredPage} from '../errored-page/ErroredPage';\nimport {LoadingPage} from '../loading-page/LoadingPage';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {IAppState} from '../../core/createStore';\nimport {IPocket, IPocketsState} from '../../core/reducers/reducePockets';\nimport {ADD_MONEY, pocketsTypes, SUBTRACT_MONEY} from '../../core/actions/pocketsTypes';\nimport {Dispatch} from 'redux';\nimport {ScrollableBlock} from '../../components/scroll/ScrollableBlock';\nimport {InputBlock} from '../../components/input-block/InputBlock';\nimport {formatNumberToString, getCrossRate} from '../../core/calculation-utils';\nimport {fetchExchangeRateApi} from './ExchangePageModel';\nimport {exchangeRateDataTypes} from '../../core/actions/exchangeRateDataTypes';\nimport {IExchangeRateDataState} from '../../core/reducers/reduceExchangeRateData';\nimport {setPollingFetch} from '../../core/fetch-utils';\n\nexport enum LastTouched {\n  TOP = 'top',\n  BOTTOM = 'bottom',\n}\n\nexport const ExchangePage = () => {\n  const pockets = useSelector<IAppState, IPocketsState>(state => state.pockets);\n  const pocketsValues = Object.values(pockets);\n  const {data, errors} = useSelector<IAppState, IExchangeRateDataState>(state => state.exchangeRateData);\n  const dispatch = useDispatch<Dispatch<pocketsTypes | exchangeRateDataTypes>>();\n  const [selectedTop, setSelectedTop] = React.useState<IPocket>(pocketsValues[0]);\n  const [selectedBottom, setSelectedBottom] = React.useState<IPocket>(pocketsValues[0]);\n  const [amountTop, setAmountTop] = React.useState<string>('');\n  const [amountBottom, setAmountBottom] = React.useState<string>('');\n  const [lastTouched, setLastTouched] = React.useState<LastTouched>(LastTouched.TOP);\n  const [insufficientFundsError, setInsufficientFundsError] = React.useState(false);\n\n  React.useEffect(() => {\n    const abortFetch = setPollingFetch(() => fetchExchangeRateApi(dispatch), 10000);\n    return () => abortFetch()\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    setSelectedTop((prevPocket) => pockets[prevPocket.name]);\n    setSelectedBottom((prevPocket) => pockets[prevPocket.name]);\n  }, [pockets]);\n\n  React.useEffect(() => {\n    if (amountTop && amountBottom) {\n      if (lastTouched === LastTouched.BOTTOM) {\n        updateTopAmount({\n          ...selectedBottom,\n          value: amountBottom,\n        });\n      } else {\n        updateBottomAmount({\n          ...selectedTop,\n          value: amountTop\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  if (errors) {\n    return (\n        <ErroredPage>\n          {errors.message}\n        </ErroredPage>\n    )\n  }\n\n  if (!data) {\n    return (\n        <LoadingPage>\n          {'Loading'}\n        </LoadingPage>\n    )\n  }\n\n  const crossRate = getCrossRate(selectedTop, selectedBottom, data.rates, data.base);\n\n  const updateTopAmount = (pocket: IPocket): void => {\n    const topRate = data.rates[selectedTop.name];\n    const botRate = data.rates[selectedBottom.name];\n    const parsedAmount = parseFloat(pocket.value);\n    if (topRate === botRate || isNaN(parsedAmount)) {\n      setAmountTop(pocket.value);\n    } else if (pocket.name === data.base) {\n      setAmountTop(formatNumberToString(parsedAmount * topRate));\n    } else {\n      setAmountTop(formatNumberToString(parsedAmount * topRate / botRate))\n    }\n  };\n\n  const updateBottomAmount = (pocket: IPocket): void => {\n    const topRate = data.rates[selectedTop.name];\n    const botRate = data.rates[selectedBottom.name];\n    const parsedAmount = parseFloat(pocket.value);\n    if (topRate === botRate || isNaN(parsedAmount)) {\n      setAmountBottom(pocket.value);\n    } else if (pocket.name === data.base) {\n      setAmountBottom(formatNumberToString(parsedAmount * botRate));\n    } else {\n      setAmountBottom(formatNumberToString(parsedAmount * botRate / topRate));\n    }\n  };\n\n  const handleChangeTopPocket = (pocketIndex: number): void => {\n    resetAmounts();\n    setSelectedTop(pocketsValues[pocketIndex]);\n  };\n\n  const handleChangeBottomPocket = (pocketIndex: number): void => {\n    resetAmounts();\n    setSelectedBottom(pocketsValues[pocketIndex]);\n  };\n\n  const handleTopAmountChange = (pocket: IPocket | ''): void => {\n    setLastTouched(LastTouched.TOP);\n    if (pocket) {\n      setInsufficientFundsError(false);\n      updateBottomAmount(pocket);\n      setAmountTop(pocket.value);\n    } else {\n      resetAmounts();\n    }\n  };\n\n  const handleBottomAmountChange = (pocket: IPocket | ''): void => {\n    setLastTouched(LastTouched.BOTTOM);\n    if (pocket) {\n      setInsufficientFundsError(false);\n      updateTopAmount(pocket);\n      setAmountBottom(pocket.value);\n    } else {\n      resetAmounts();\n    }\n  };\n\n  const handleExchangeClick = (): void => {\n    if (amountTop && amountBottom) {\n      if (parseFloat(amountTop) > parseFloat(selectedTop.value)) {\n        setInsufficientFundsError(true);\n        return;\n      }\n      dispatch({\n        type: SUBTRACT_MONEY,\n        payload: {...selectedTop, value: amountTop}\n      });\n      dispatch({\n        type: ADD_MONEY,\n        payload: {...selectedBottom, value: amountBottom}\n      });\n      resetAmounts();\n    }\n  };\n\n  const resetAmounts = () => {\n    setInsufficientFundsError(false);\n    setAmountTop('');\n    setAmountBottom('');\n  };\n\n  return (\n      <div className=\"page_container\">\n        <Header\n            exchangeOnClick={handleExchangeClick}\n            selectedTop={selectedTop}\n            selectedBottom={selectedBottom}\n            crossRate={crossRate}\n            disabled={!amountTop || !amountBottom}\n        />\n\n        <ScrollableBlock\n            afterChange={handleChangeTopPocket}\n            beforeChange={resetAmounts}\n            className=\"input_container_top\"\n        >\n          {pocketsValues.map((pocket, i) => (\n              <InputBlock\n                  key={i}\n                  pocket={pocket}\n                  amount={amountTop}\n                  onAmountChange={handleTopAmountChange}\n                  amountPrefix={'-'}\n                  bottomLabel={insufficientFundsError && (\n                      <span className=\"insufficient_funds_error\">\n                        {'Insufficient funds'}\n                      </span>\n                  )}\n              />\n          ))}\n        </ScrollableBlock>\n        <ScrollableBlock\n            afterChange={handleChangeBottomPocket}\n            beforeChange={resetAmounts}\n            className=\"triangle input_container_bottom\"\n        >\n          {pocketsValues.map((pocket, i) => (\n              <InputBlock\n                  key={i}\n                  pocket={pocket}\n                  amount={amountBottom}\n                  onAmountChange={handleBottomAmountChange}\n                  amountPrefix={'+'}\n                  bottomLabel={selectedTop.name !== selectedBottom.name && (\n                      <span className=\"input_block_bottom_currency\">\n                        <span className=\"input_block_currency_symbol\">\n                          {selectedTop.currency}\n                        </span>\n                        {'1 = '}\n                        <span className=\"input_block_currency_symbol\">\n                          {selectedBottom.currency}\n                        </span>\n                        {crossRate}\n                      </span>\n                  )}\n              />\n          ))}\n        </ScrollableBlock>\n\n      </div>\n  );\n};\n\nExchangePage.displayName = 'ExchangePage';\n","export interface IAbortableFetch {\n  abort: () => void;\n  ready: Promise<Response>\n}\n\nexport const abortableFetch = (request: RequestInfo, options?: RequestInit): IAbortableFetch => {\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  return {\n    abort: () => controller.abort(),\n    ready: fetch(request, {...options, signal})\n  };\n};\n\nexport const getFetchJson = async <T>(promise: Promise<Response>, onError: (error: Error) => void): Promise<T | void> => {\n  return await promise\n      .then((res) => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          throw new Error(`Failed to fetch ${res.url}.`)\n        }\n      })\n      .then((data: T) => data)\n      .catch((error: Error) => {\n        onError(error)\n      });\n};\n\nexport const setPollingFetch = (callback: () => Promise<IAbortableFetch>, delay: number = 10000): () => void => {\n  let id: number;\n  let res: IAbortableFetch;\n  async function tick() {\n    res = await callback();\n    id = window.setTimeout(tick, delay);\n  }\n  id = window.setTimeout(tick, delay);\n  return () => {\n    clearInterval(id);\n    res?.abort();\n  };\n};\n\n","export const MockRateData = {\n  'documentation': 'https://www.exchangerate-api.com/docs/free',\n  'terms_of_use': 'https://www.exchangerate-api.com/terms',\n  'time_zone': 'UTC',\n  'time_last_update': 1585699599,\n  'time_next_update': 1585787189,\n  'time_eol': 0,\n  'base': 'USD',\n  'rates': {\n    'USD': 1,\n    'AED': 3.67,\n    'ARS': 64.41,\n    'AUD': 1.63,\n    'BGN': 1.78,\n    'BRL': 5.19,\n    'BSD': 1,\n    'CAD': 1.42,\n    'CHF': 0.964,\n    'CLP': 852.83,\n    'CNY': 7.1,\n    'COP': 4030,\n    'CZK': 24.89,\n    'DKK': 6.8,\n    'DOP': 53.7,\n    'EGP': 15.72,\n    'EUR': 0.91,\n    'FJD': 2.28,\n    'GBP': 0.808,\n    'GTQ': 7.71,\n    'HKD': 7.75,\n    'HRK': 6.95,\n    'HUF': 327.51,\n    'IDR': 16419.5,\n    'ILS': 3.56,\n    'INR': 75.55,\n    'ISK': 141.61,\n    'JPY': 108.14,\n    'KRW': 1223.23,\n    'KZT': 447.78,\n    'MXN': 23.88,\n    'MYR': 4.32,\n    'NOK': 10.49,\n    'NZD': 1.68,\n    'PAB': 1,\n    'PEN': 3.44,\n    'PHP': 50.97,\n    'PKR': 164.97,\n    'PLN': 4.14,\n    'PYG': 6510,\n    'RON': 4.4,\n    'RUB': 78.66,\n    'SAR': 3.76,\n    'SEK': 10.03,\n    'SGD': 1.43,\n    'THB': 32.76,\n    'TRY': 6.59,\n    'TWD': 30.26,\n    'UAH': 27.69,\n    'UYU': 43.6,\n    'ZAR': 17.9\n  }\n};\n","import {abortableFetch, getFetchJson, IAbortableFetch} from '../../core/fetch-utils';\nimport {Dispatch} from 'redux';\nimport {exchangeRateDataTypes, UPDATE_EXCHANGE_RATE_DATA} from '../../core/actions/exchangeRateDataTypes';\nimport {IExchangeRateData} from '../../core/reducers/reduceExchangeRateData';\nimport {MockRateData} from './MockRateData';\n\nexport const fetchExchangeRateApi = async (dispatch: Dispatch<exchangeRateDataTypes>): Promise<IAbortableFetch> => {\n  const fetchObj = abortableFetch('https://api.exchangerate-api.com/v5/latest');\n\n  // Return MockRateData in case of rate limiting error from API.\n\n  const result = await getFetchJson<IExchangeRateData>(\n      fetchObj.ready,\n      () => dispatch({\n        type: UPDATE_EXCHANGE_RATE_DATA,\n        payload: MockRateData,\n      })\n  );\n\n  // This is a right way to handle errors.\n\n  // const result = await getFetchJson<IExchangeRateData>(\n  //     fetchObj.ready,\n  //     (error) => dispatch({\n  //       type: SET_EXCHANGE_RATE_ERRORS,\n  //       payload: error\n  //     })\n  // );\n\n  if (result) {\n    dispatch({\n      type: UPDATE_EXCHANGE_RATE_DATA,\n      payload: result\n    })\n  }\n  return fetchObj;\n};\n","import {IExchangeRateData} from '../reducers/reduceExchangeRateData';\n\nexport const UPDATE_EXCHANGE_RATE_DATA = 'update_exchange_rate_data';\nexport const SET_EXCHANGE_RATE_ERRORS = 'set_exchange_rate_errors';\n\ninterface UpdateExchangeRateDataAction {\n  type: typeof UPDATE_EXCHANGE_RATE_DATA;\n  payload: IExchangeRateData;\n}\n\ninterface SetExchangeRateErrorsAction {\n  type: typeof SET_EXCHANGE_RATE_ERRORS;\n  payload: Error;\n}\n\nexport type exchangeRateDataTypes = UpdateExchangeRateDataAction | SetExchangeRateErrorsAction;\n","import {IPocket} from '../reducers/reducePockets';\n\nexport const ADD_MONEY = 'add_money';\nexport const SUBTRACT_MONEY = 'subtract_money';\n\ninterface AddMoneyAction {\n  type: typeof ADD_MONEY;\n  payload: IPocket;\n}\n\ninterface SubtractMoneyAction {\n  type: typeof SUBTRACT_MONEY;\n  payload: IPocket;\n}\n\nexport type pocketsTypes = AddMoneyAction | SubtractMoneyAction;\n","import {combineReducers, createStore, Store} from 'redux';\nimport {IPocketsState, reducePockets} from './reducers/reducePockets';\nimport {IExchangeRateDataState, reduceExchangeRateData} from './reducers/reduceExchangeRateData';\nimport {pocketsTypes} from './actions/pocketsTypes';\nimport {exchangeRateDataTypes} from './actions/exchangeRateDataTypes';\nimport {MockRateData} from '../pages/exchange-page/MockRateData';\n\nexport interface IAppState {\n  pockets: IPocketsState;\n  exchangeRateData: IExchangeRateDataState;\n}\n\nexport const initialAppState: IAppState = {\n  pockets: {\n    'USD': {\n      name: 'USD',\n      value: '100.00',\n      currency: '$',\n    },\n    'GBP': {\n      name: 'GBP',\n      value: '50.00',\n      currency: '£',\n    },\n    'EUR': {\n      name: 'EUR',\n      value: '20.00',\n      currency: '€',\n    }\n  },\n  exchangeRateData: {\n    data: null,\n    errors: null,\n  },\n};\n\nexport const store: Store<IAppState, pocketsTypes | exchangeRateDataTypes> = createStore(\n    combineReducers({\n      pockets: reducePockets,\n      exchangeRateData: reduceExchangeRateData,\n    }),\n    initialAppState);\n","import {initialAppState} from '../createStore';\nimport {ADD_MONEY, pocketsTypes, SUBTRACT_MONEY} from '../actions/pocketsTypes';\nimport {formatNumberToString} from '../calculation-utils';\n\nexport interface IPocket {\n  name: string;\n  value: string;\n  currency: string;\n}\n\nexport interface IPocketsState {\n  [key: string]: IPocket;\n}\n\nexport const reducePockets = (state: IPocketsState = initialAppState.pockets, action: pocketsTypes): IPocketsState => {\n  switch (action.type) {\n    case ADD_MONEY:\n      return {\n        ...state,\n        [action.payload.name]: {\n          ...action.payload,\n          value: formatNumberToString(parseFloat(state[action.payload.name].value) + parseFloat(action.payload.value)),\n        },\n      };\n    case SUBTRACT_MONEY:\n      return {\n        ...state,\n        [action.payload.name]: {\n          ...action.payload,\n          value: formatNumberToString(parseFloat(state[action.payload.name].value) - parseFloat(action.payload.value)),\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import {initialAppState} from '../createStore';\nimport {\n  exchangeRateDataTypes,\n  SET_EXCHANGE_RATE_ERRORS,\n  UPDATE_EXCHANGE_RATE_DATA\n} from '../actions/exchangeRateDataTypes';\n\nexport interface IRatesData {\n  [key: string]: number\n}\n\nexport interface IExchangeRateData {\n  'documentation': string;\n  'terms_of_use': string;\n  'time_zone': string;\n  'time_last_update': number;\n  'time_next_update': number;\n  'time_eol': number;\n  'base': string;\n  'rates': IRatesData;\n}\n\nexport interface IExchangeRateDataState {\n  data: IExchangeRateData | null;\n  errors: Error | null;\n}\n\nexport const reduceExchangeRateData = (state: IExchangeRateDataState = initialAppState.exchangeRateData, action: exchangeRateDataTypes): IExchangeRateDataState => {\n  switch (action.type) {\n    case UPDATE_EXCHANGE_RATE_DATA:\n      return {\n        data: action.payload,\n        errors: null,\n      };\n    case SET_EXCHANGE_RATE_ERRORS:\n      return {\n        ...state,\n        errors: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main/index.css';\nimport {ExchangePage} from './main/pages/exchange-page/ExchangePage';\nimport {store} from './main/core/createStore';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <ExchangePage/>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}